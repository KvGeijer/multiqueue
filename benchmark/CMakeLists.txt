add_library(basic_benchmark INTERFACE)
target_link_libraries(basic_benchmark INTERFACE multiqueue_warnings)
target_compile_features(basic_benchmark INTERFACE cxx_std_17)
target_compile_definitions(basic_benchmark INTERFACE "NDEBUG")
target_compile_options(basic_benchmark INTERFACE "-O3")
target_compile_options(basic_benchmark INTERFACE "-march=native")
if(CMAKE_COMPILER_IS_GNUCXX)
  target_link_options(basic_benchmark INTERFACE "-flto")
endif()

add_executable(micro_benchmarks main.cpp heap.cpp)
target_link_libraries(micro_benchmarks PRIVATE multiqueue::multiqueue basic_benchmark)
target_link_libraries_system(micro_benchmarks PRIVATE Catch2::Catch2)
target_compile_definitions(micro_benchmarks PRIVATE CATCH_CONFIG_ENABLE_BENCHMARKING)

add_library(quality_benchmark INTERFACE)
target_link_libraries(quality_benchmark INTERFACE threading basic_benchmark)
target_link_libraries_system(quality_benchmark INTERFACE cxxopts)
target_sources(quality_benchmark INTERFACE quality.cpp)

add_custom_target(all_quality_benchmarks COMMENT "Build all quality benchmarks")

function(add_wrapper_quality_benchmark name define)
  add_executable(${name}_quality_benchmark)
  target_compile_definitions(${name}_quality_benchmark PRIVATE ${define})
  target_link_libraries(${name}_quality_benchmark PRIVATE ${name}_wrapper quality_benchmark)
  add_dependencies(all_quality_benchmarks ${name}_quality_benchmark)
endfunction()

function(add_mq_quality_benchmark name define)
  add_executable(${name}_quality_benchmark)
  target_compile_definitions(${name}_quality_benchmark PRIVATE ${define})
  target_link_libraries(${name}_quality_benchmark PRIVATE multiqueue::multiqueue quality_benchmark)
  add_dependencies(all_quality_benchmarks ${name}_quality_benchmark)
endfunction()

add_wrapper_quality_benchmark(capq PQ_CAPQ)
add_wrapper_quality_benchmark(klsm PQ_KLSM)
add_wrapper_quality_benchmark(dlsm PQ_DLSM)
add_wrapper_quality_benchmark(linden PQ_LINDEN)
add_wrapper_quality_benchmark(spraylist PQ_SPRAYLIST)
add_mq_quality_benchmark(nbmq PQ_NBMQ)
add_mq_quality_benchmark(tbmq PQ_TBMQ)
add_mq_quality_benchmark(dbmq PQ_DBMQ)
add_mq_quality_benchmark(smdmq PQ_SMDMQ)
add_mq_quality_benchmark(idmq PQ_IDMQ)
add_mq_quality_benchmark(lqmq PQ_LQMQ)
add_mq_quality_benchmark(mmq PQ_MMQ)
add_mq_quality_benchmark(namq PQ_NAMQ)
target_link_libraries(namq_quality_benchmark PRIVATE numa)

add_executable(evaluate_quality evaluate_quality.cpp)
target_link_libraries(evaluate_quality PRIVATE multiqueue_warnings)
target_link_libraries_system(evaluate_quality PRIVATE cxxopts tlx)
target_compile_features(
  evaluate_quality PRIVATE
  cxx_std_17
)
target_compile_definitions(evaluate_quality INTERFACE "NDEBUG")
target_compile_options(evaluate_quality INTERFACE "-O3")

add_library(throughput_benchmark INTERFACE)
target_link_libraries(throughput_benchmark INTERFACE threading basic_benchmark)
target_link_libraries_system(throughput_benchmark INTERFACE cxxopts)
target_sources(throughput_benchmark INTERFACE throughput.cpp)

add_custom_target(all_throughput_benchmarks COMMENT "Build all throughput benchmarks")


function(add_wrapper_throughput_benchmark name define)
  add_executable(${name}_throughput_benchmark)
  target_compile_definitions(${name}_throughput_benchmark PRIVATE ${define})
  target_link_libraries(${name}_throughput_benchmark PRIVATE ${name}_wrapper throughput_benchmark)
  add_dependencies(all_throughput_benchmarks ${name}_throughput_benchmark)
endfunction()

function(add_mq_throughput_benchmark name define)
  add_executable(${name}_throughput_benchmark)
  target_compile_definitions(${name}_throughput_benchmark PRIVATE ${define})
  target_link_libraries(${name}_throughput_benchmark PRIVATE multiqueue::multiqueue throughput_benchmark)
  add_dependencies(all_throughput_benchmarks ${name}_throughput_benchmark)
endfunction()

function(add_idmq_throughput_benchmark C HeapDegree Ibs Dbs)
  add_executable(idmq_throughput_benchmark_${C}_${HeapDegree}_${Ibs}_${Dbs})
  target_compile_definitions(idmq_throughput_benchmark_${C}_${HeapDegree}_${Ibs}_${Dbs} PRIVATE PQ_IDMQ IDMQ_C=${C} IDMQ_HEAP_DEGREE=${HeapDegree} IDMQ_IBUFFER_SIZE=${Ibs} IDMQ_DBUFFER_SIZE=${Dbs})
  target_link_libraries(idmq_throughput_benchmark_${C}_${HeapDegree}_${Ibs}_${Dbs} PRIVATE multiqueue::multiqueue throughput_benchmark)
  add_dependencies(all_throughput_benchmarks idmq_throughput_benchmark_${C}_${HeapDegree}_${Ibs}_${Dbs})
endfunction()

function(add_mmq_throughput_benchmark NS)
  add_executable(mmq_throughput_benchmark_${NS})
  target_compile_definitions(mmq_throughput_benchmark_${NS} PRIVATE PQ_MMQ MMQ_NS=${NS})
  target_link_libraries(mmq_throughput_benchmark_${NS} PRIVATE multiqueue::multiqueue throughput_benchmark)
  add_dependencies(all_throughput_benchmarks mmq_throughput_benchmark_${NS})
endfunction()

add_wrapper_throughput_benchmark(capq PQ_CAPQ)
add_wrapper_throughput_benchmark(klsm PQ_KLSM)
add_wrapper_throughput_benchmark(dlsm PQ_DLSM)
add_wrapper_throughput_benchmark(linden PQ_LINDEN)
add_wrapper_throughput_benchmark(spraylist PQ_SPRAYLIST)
add_mq_throughput_benchmark(nbmq PQ_NBMQ)
add_mq_throughput_benchmark(tbmq PQ_TBMQ)
add_mq_throughput_benchmark(dbmq PQ_DBMQ)
add_mq_throughput_benchmark(smdmq PQ_SMDMQ)
add_mq_throughput_benchmark(idmq PQ_IDMQ)
add_mq_throughput_benchmark(lqmq PQ_LQMQ)
add_mq_throughput_benchmark(mmq PQ_MMQ)
add_mq_throughput_benchmark(namq PQ_NAMQ)
target_link_libraries(namq_throughput_benchmark PRIVATE numa)

set(MQ_BUFFER_SIZES 2 8 16 64 128 1024)
foreach(i ${MQ_BUFFER_SIZES})
  foreach(j ${MQ_BUFFER_SIZES})
    add_idmq_throughput_benchmark(4 4 ${i} ${j})
  endforeach()
endforeach()

set(MQ_C 2 8 16 32)
foreach(i ${MQ_C})
    add_idmq_throughput_benchmark(${i} 4 16 16)
endforeach()

set(M_NS 2 4 8 16 64 128 1024)
foreach(i ${M_NS})
    add_mmq_throughput_benchmark(${i})
endforeach()

add_custom_target(all_benchmarks COMMENT "Build all benchmarks")
add_dependencies(all_benchmarks micro_benchmarks all_quality_benchmarks all_throughput_benchmarks)
